import React, { useState, useEffect } from 'react';
import {
    View,
    Text,
    StyleSheet,
    TouchableOpacity,
    Alert,
    Dimensions,
    StatusBar,
} from 'react-native';
import { LinearGradient } from 'expo-linear-gradient';
import { Ionicons } from '@expo/vector-icons';
import { SafeAreaView } from 'react-native-safe-area-context';
import { colors, spacing, radius, elevation } from '../../design/tokens';
import { NativeStackNavigationProp } from '@react-navigation/native-stack';
import { RootStackParamList } from '../../navigation/AppNavigator';

const { width: screenWidth, height: screenHeight } = Dimensions.get('window');

type ViewerLiveStreamScreenNavigationProp = NativeStackNavigationProp<RootStackParamList, 'LiveStream'>;

interface ViewerLiveStreamScreenProps {
    navigation: ViewerLiveStreamScreenNavigationProp;
    route: {
        params: {
            cameraId: number;
            cameraName: string;
        };
    };
}

export default function ViewerLiveStreamScreen({ navigation, route }: ViewerLiveStreamScreenProps) {
    const { cameraId, cameraName } = route.params;
    const [isLoading, setIsLoading] = useState(true);
    const [isConnected, setIsConnected] = useState(false);
    const [error, setError] = useState<string | null>(null);
    const [isFullscreen, setIsFullscreen] = useState(false);
    const [quality, setQuality] = useState<'480p' | '720p' | '1080p'>('720p');
    const [isRecording, setIsRecording] = useState(false);
    const [showControls, setShowControls] = useState(true);

    useEffect(() => {
        const connectStream = async () => {
            setIsLoading(true);
            setError(null);

            try {
                // 실제로는 WebRTC 연결 로직
                await new Promise(resolve => setTimeout(resolve, 2000));
                setIsConnected(true);
                setIsLoading(false);
            } catch (err) {
                setError('스트림 연결에 실패했습니다.');
                setIsLoading(false);
            }
        };

        connectStream();
    }, [cameraId]);

    const handleRetryConnection = () => {
        setIsLoading(true);
        setError(null);
        setTimeout(() => {
            setIsConnected(true);
            setIsLoading(false);
        }, 2000);
    };

    const handleQualityChange = () => {
        const qualities: Array<'480p' | '720p' | '1080p'> = ['480p', '720p', '1080p'];
        const currentIndex = qualities.indexOf(quality);
        const nextQuality = qualities[(currentIndex + 1) % qualities.length];
        setQuality(nextQuality);
    };

    const handleToggleRecording = () => {
        setIsRecording(!isRecording);
        Alert.alert(
            isRecording ? '녹화 중지' : '녹화 시작',
            isRecording ? '녹화가 중지되었습니다.' : '녹화를 시작합니다.',
            [{ text: '확인' }]
        );
    };

    const handleSnapshot = () => {
        Alert.alert('스냅샷', '현재 화면이 저장되었습니다.');
    };

    const handleToggleFullscreen = () => {
        setIsFullscreen(!isFullscreen);
        StatusBar.setHidden(!isFullscreen);
    };

    const handleVideoPress = () => {
        setShowControls(!showControls);
    };

    if (isLoading) {
        return (
            <View style={styles.container}>
                <LinearGradient
                    colors={[colors.text, colors.text]}
                    style={styles.gradientBackground}
                />
                <SafeAreaView style={styles.safeArea}>
                    <View style={styles.header}>
                        <TouchableOpacity onPress={() => navigation.goBack()}>
                            <Ionicons name="arrow-back" size={24} color={colors.surface} />
                        </TouchableOpacity>
                        <Text style={styles.headerTitle}>{cameraName}</Text>
                        <View style={styles.headerSpacer} />
                    </View>
                    <View style={styles.loadingContainer}>
                        <Ionicons name="videocam" size={80} color={colors.surface} />
                        <Text style={styles.loadingText}>라이브 스트림 연결 중...</Text>
                    </View>
                </SafeAreaView>
            </View>
        );
    }

    if (error) {
        return (
            <View style={styles.container}>
                <LinearGradient
                    colors={[colors.text, colors.text]}
                    style={styles.gradientBackground}
                />
                <SafeAreaView style={styles.safeArea}>
                    <View style={styles.header}>
                        <TouchableOpacity onPress={() => navigation.goBack()}>
                            <Ionicons name="arrow-back" size={24} color={colors.surface} />
                        </TouchableOpacity>
                        <Text style={styles.headerTitle}>{cameraName}</Text>
                        <View style={styles.headerSpacer} />
                    </View>
                    <View style={styles.errorContainer}>
                        <Ionicons name="wifi-outline" size={80} color={colors.surface} />
                        <Text style={styles.errorTitle}>연결 실패</Text>
                        <Text style={styles.errorText}>{error}</Text>
                        <TouchableOpacity style={styles.retryButton} onPress={handleRetryConnection}>
                            <Text style={styles.retryButtonText}>다시 연결</Text>
                        </TouchableOpacity>
                    </View>
                </SafeAreaView>
            </View>
        );
    }

    return (
        <View style={[styles.container, isFullscreen && styles.fullscreenContainer]}>
            <LinearGradient
                colors={[colors.text, '#1a1a1a']}
                style={styles.gradientBackground}
            />

            {!isFullscreen && (
                <SafeAreaView style={styles.safeArea}>
                    <View style={styles.header}>
                        <TouchableOpacity onPress={() => navigation.goBack()}>
                            <Ionicons name="arrow-back" size={24} color={colors.surface} />
                        </TouchableOpacity>
                        <Text style={styles.headerTitle}>{cameraName}</Text>
                        <TouchableOpacity onPress={handleQualityChange}>
                            <Text style={styles.qualityText}>{quality}</Text>
                        </TouchableOpacity>
                    </View>
                </SafeAreaView>
            )}

            <TouchableOpacity
                style={[styles.videoContainer, isFullscreen && styles.fullscreenVideo]}
                activeOpacity={1}
                onPress={handleVideoPress}
            >
                <LinearGradient
                    colors={[colors.text + '90', colors.text]}
                    style={styles.videoStream}
                >
                    <View style={styles.videoContent}>
                        <View style={styles.streamIcon}>
                            <LinearGradient
                                colors={[colors.primary + '40', colors.primary]}
                                style={styles.iconGradient}
                            >
                                <Ionicons name="videocam" size={80} color={colors.surface} />
                            </LinearGradient>
                        </View>

                        <View style={styles.streamInfo}>
                            <Text style={styles.streamTitle}>{cameraName}</Text>
                            <Text style={styles.streamSubtitle}>라이브 스트림</Text>
                        </View>
                    </View>
                </LinearGradient>

                {showControls && (
                    <View style={styles.controlsOverlay}>
                        {/* Top Controls */}
                        <View style={styles.topControls}>
                            {isFullscreen && (
                                <TouchableOpacity
                                    style={styles.fullscreenBackButton}
                                    onPress={() => {
                                        setIsFullscreen(false);
                                        StatusBar.setHidden(false);
                                        navigation.goBack();
                                    }}
                                >
                                    <Ionicons name="arrow-back" size={24} color={colors.surface} />
                                </TouchableOpacity>
                            )}
                            <View style={styles.topRight}>
                                {isRecording && (
                                    <View style={styles.recordingIndicator}>
                                        <View style={styles.recordingDot} />
                                        <Text style={styles.recordingText}>REC</Text>
                                    </View>
                                )}
                            </View>
                        </View>

                        {/* Bottom Controls */}
                        <View style={styles.bottomControls}>
                            <LinearGradient
                                colors={['transparent', 'rgba(0,0,0,0.8)']}
                                style={styles.controlsGradient}
                            >
                                <View style={styles.controlsContainer}>
                                    <TouchableOpacity
                                        style={styles.controlButton}
                                        onPress={handleQualityChange}
                                    >
                                        <Ionicons name="settings-outline" size={24} color={colors.surface} />
                                    </TouchableOpacity>

                                    <TouchableOpacity
                                        style={[
                                            styles.controlButton,
                                            styles.recordButton,
                                            isRecording && styles.recordButtonActive
                                        ]}
                                        onPress={handleToggleRecording}
                                    >
                                        <Ionicons
                                            name={isRecording ? 'stop' : 'radio-button-on'}
                                            size={24}
                                            color={colors.surface}
                                        />
                                    </TouchableOpacity>

                                    <TouchableOpacity
                                        style={styles.controlButton}
                                        onPress={handleSnapshot}
                                    >
                                        <Ionicons name="camera-outline" size={24} color={colors.surface} />
                                    </TouchableOpacity>

                                    <TouchableOpacity
                                        style={styles.controlButton}
                                        onPress={handleToggleFullscreen}
                                    >
                                        <Ionicons
                                            name={isFullscreen ? 'contract-outline' : 'expand-outline'}
                                            size={24}
                                            color={colors.surface}
                                        />
                                    </TouchableOpacity>
                                </View>
                            </LinearGradient>
                        </View>
                    </View>
                )}
            </TouchableOpacity>

            {!isFullscreen && (
                <View style={styles.infoPanel}>
                    <LinearGradient
                        colors={[colors.surface, colors.surfaceAlt]}
                        style={styles.infoPanelGradient}
                    >
                        <View style={styles.connectionStatus}>
                            <View style={styles.statusRow}>
                                <View style={styles.statusIndicator} />
                                <Text style={styles.statusText}>연결됨</Text>
                                <View style={styles.statusDetails}>
                                    <Text style={styles.statusDetail}>{quality}</Text>
                                    <Text style={styles.statusSeparator}>•</Text>
                                    <Text style={styles.statusDetail}>150ms</Text>
                                    <Text style={styles.statusSeparator}>•</Text>
                                    <Text style={styles.statusDetail}>2.4 Mbps</Text>
                                </View>
                            </View>
                        </View>

                        <View style={styles.quickActions}>
                            <TouchableOpacity style={styles.quickAction}>
                                <View style={styles.quickActionIcon}>
                                    <Ionicons name="download-outline" size={20} color={colors.primary} />
                                </View>
                                <Text style={styles.quickActionText}>다운로드</Text>
                            </TouchableOpacity>

                            <TouchableOpacity style={styles.quickAction}>
                                <View style={styles.quickActionIcon}>
                                    <Ionicons name="share-outline" size={20} color={colors.primary} />
                                </View>
                                <Text style={styles.quickActionText}>공유</Text>
                            </TouchableOpacity>

                            <TouchableOpacity style={styles.quickAction}>
                                <View style={styles.quickActionIcon}>
                                    <Ionicons name="settings-outline" size={20} color={colors.primary} />
                                </View>
                                <Text style={styles.quickActionText}>설정</Text>
                            </TouchableOpacity>

                            <TouchableOpacity style={styles.quickAction}>
                                <View style={styles.quickActionIcon}>
                                    <Ionicons name="information-circle-outline" size={20} color={colors.primary} />
                                </View>
                                <Text style={styles.quickActionText}>정보</Text>
                            </TouchableOpacity>
                        </View>
                    </LinearGradient>
                </View>
            )}
        </View>
    );
}

const styles = StyleSheet.create({
    container: {
        flex: 1,
        backgroundColor: colors.text,
    },
    gradientBackground: {
        position: 'absolute',
        top: 0,
        left: 0,
        right: 0,
        bottom: 0,
    },
    fullscreenContainer: {
        backgroundColor: colors.text,
    },
    safeArea: {
        zIndex: 10,
    },
    header: {
        flexDirection: 'row',
        alignItems: 'center',
        justifyContent: 'space-between',
        paddingHorizontal: spacing.lg,
        paddingVertical: spacing.md,
    },
    headerTitle: {
        fontSize: 18,
        fontWeight: '700',
        color: colors.surface,
    },
    headerSpacer: {
        width: 24,
    },
    qualityText: {
        fontSize: 14,
        fontWeight: '600',
        color: colors.surface,
        backgroundColor: 'rgba(0,0,0,0.5)',
        paddingHorizontal: spacing.sm,
        paddingVertical: spacing.xs,
        borderRadius: radius.sm,
    },
    loadingContainer: {
        flex: 1,
        justifyContent: 'center',
        alignItems: 'center',
    },
    loadingText: {
        fontSize: 16,
        color: colors.surface,
        marginTop: spacing.lg,
    },
    errorContainer: {
        flex: 1,
        justifyContent: 'center',
        alignItems: 'center',
        paddingHorizontal: spacing.xl,
    },
    errorTitle: {
        fontSize: 24,
        fontWeight: '700',
        color: colors.surface,
        marginTop: spacing.lg,
        marginBottom: spacing.sm,
    },
    errorText: {
        fontSize: 16,
        color: colors.surface + 'CC',
        textAlign: 'center',
        marginBottom: spacing.xl,
    },
    retryButton: {
        backgroundColor: colors.primary,
        paddingHorizontal: spacing.xl,
        paddingVertical: spacing.md,
        borderRadius: radius.lg,
    },
    retryButtonText: {
        fontSize: 16,
        fontWeight: '600',
        color: colors.surface,
    },
    videoContainer: {
        flex: 1,
        position: 'relative',
    },
    fullscreenVideo: {
        position: 'absolute',
        top: 0,
        left: 0,
        right: 0,
        bottom: 0,
        zIndex: 1,
    },
    videoStream: {
        flex: 1,
        justifyContent: 'center',
        alignItems: 'center',
    },
    videoContent: {
        alignItems: 'center',
        justifyContent: 'center',
    },
    streamIcon: {
        marginBottom: spacing.xl,
    },
    iconGradient: {
        width: 160,
        height: 160,
        borderRadius: 80,
        alignItems: 'center',
        justifyContent: 'center',
        ...elevation['3'],
    },
    streamInfo: {
        alignItems: 'center',
    },
    streamTitle: {
        fontSize: 24,
        fontWeight: '700',
        color: colors.surface,
        marginBottom: spacing.sm,
    },
    streamSubtitle: {
        fontSize: 16,
        color: colors.surface + 'CC',
    },

    // Controls Overlay
    controlsOverlay: {
        position: 'absolute',
        top: 0,
        left: 0,
        right: 0,
        bottom: 0,
        justifyContent: 'space-between',
    },
    topControls: {
        flexDirection: 'row',
        justifyContent: 'space-between',
        alignItems: 'flex-start',
        padding: spacing.lg,
        paddingTop: spacing.xl,
    },
    fullscreenBackButton: {
        width: 44,
        height: 44,
        borderRadius: 22,
        backgroundColor: 'rgba(0,0,0,0.7)',
        alignItems: 'center',
        justifyContent: 'center',
    },
    topRight: {
        flexDirection: 'row',
        alignItems: 'center',
        gap: spacing.md,
    },
    recordingIndicator: {
        flexDirection: 'row',
        alignItems: 'center',
        backgroundColor: colors.error,
        paddingHorizontal: spacing.md,
        paddingVertical: spacing.sm,
        borderRadius: radius.full,
        gap: spacing.xs,
    },
    recordingDot: {
        width: 8,
        height: 8,
        borderRadius: 4,
        backgroundColor: colors.surface,
    },
    recordingText: {
        fontSize: 12,
        color: colors.surface,
        fontWeight: '700',
    },
    bottomControls: {
        padding: spacing.lg,
    },
    controlsGradient: {
        borderRadius: radius.xl,
        overflow: 'hidden',
    },
    controlsContainer: {
        flexDirection: 'row',
        justifyContent: 'center',
        alignItems: 'center',
        paddingVertical: spacing.lg,
        paddingHorizontal: spacing.xl,
        gap: spacing.xl,
    },
    controlButton: {
        width: 52,
        height: 52,
        borderRadius: 26,
        backgroundColor: 'rgba(255,255,255,0.2)',
        alignItems: 'center',
        justifyContent: 'center',
        ...elevation['2'],
    },
    recordButton: {
        backgroundColor: colors.error,
        width: 60,
        height: 60,
        borderRadius: 30,
    },
    recordButtonActive: {
        backgroundColor: colors.error,
        ...elevation['3'],
    },

    // Info Panel
    infoPanel: {
        borderTopWidth: 1,
        borderTopColor: colors.divider,
    },
    infoPanelGradient: {
        padding: spacing.xl,
    },
    connectionStatus: {
        marginBottom: spacing.lg,
    },
    statusRow: {
        flexDirection: 'row',
        alignItems: 'center',
        gap: spacing.md,
    },
    statusIndicator: {
        width: 12,
        height: 12,
        borderRadius: 6,
        backgroundColor: colors.success,
    },
    statusText: {
        fontSize: 16,
        fontWeight: '600',
        color: colors.text,
    },
    statusDetails: {
        flexDirection: 'row',
        alignItems: 'center',
        gap: spacing.xs,
        marginLeft: 'auto',
    },
    statusDetail: {
        fontSize: 12,
        color: colors.textSecondary,
        fontWeight: '600',
    },
    statusSeparator: {
        fontSize: 12,
        color: colors.divider,
    },
    quickActions: {
        flexDirection: 'row',
        justifyContent: 'space-around',
        gap: spacing.md,
    },
    quickAction: {
        flex: 1,
        alignItems: 'center',
        padding: spacing.md,
        borderRadius: radius.md,
        backgroundColor: colors.surfaceAlt,
    },
    quickActionIcon: {
        width: 40,
        height: 40,
        borderRadius: 20,
        backgroundColor: colors.primary + '20',
        alignItems: 'center',
        justifyContent: 'center',
        marginBottom: spacing.sm,
    },
    quickActionText: {
        fontSize: 12,
        color: colors.text,
        fontWeight: '600',
        textAlign: 'center',
    },
}); 
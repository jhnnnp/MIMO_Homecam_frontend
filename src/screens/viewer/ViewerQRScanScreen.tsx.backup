import React, { useState, useEffect } from 'react';
import {
    View,
    Text,
    StyleSheet,
    TouchableOpacity,
    StatusBar,
    Alert,
    Dimensions,
} from 'react-native';
import { LinearGradient } from 'expo-linear-gradient';
import { Ionicons } from '@expo/vector-icons';
import { SafeAreaView } from 'react-native-safe-area-context';
import { colors, spacing, radius, elevation } from '../../design/tokens';
import { NativeStackNavigationProp } from '@react-navigation/native-stack';
import { RootStackParamList } from '../../navigation/AppNavigator';

const { width: screenWidth, height: screenHeight } = Dimensions.get('window');

type ViewerQRScanScreenNavigationProp = NativeStackNavigationProp<RootStackParamList, 'ViewerQRScan'>;

interface ViewerQRScanScreenProps {
    navigation: ViewerQRScanScreenNavigationProp;
}

export default function ViewerQRScanScreen({ navigation }: ViewerQRScanScreenProps) {
    const [isScanning, setIsScanning] = useState(true);
    const [isConnecting, setIsConnecting] = useState(false);
    const [scannedData, setScannedData] = useState<string | null>(null);

    useEffect(() => {
        // 실제로는 카메라 권한 요청 및 QR 스캐너 초기화
        startScanning();
    }, []);

    const startScanning = () => {
        setIsScanning(true);
        setIsConnecting(false);
        setScannedData(null);
    };

    const handleQRCodeScanned = (data: string) => {
        try {
            const parsedData = JSON.parse(data);

            if (parsedData.type === 'mimo_camera_connect') {
                setScannedData(data);
                setIsScanning(false);
                handleConnectToCamera(parsedData);
            } else {
                Alert.alert('잘못된 QR 코드', 'MIMO 홈캠 QR 코드가 아닙니다.');
            }
        } catch (error) {
            Alert.alert('오류', 'QR 코드를 읽을 수 없습니다.');
        }
    };

    const handleConnectToCamera = async (cameraData: any) => {
        setIsConnecting(true);

        try {
            // 실제로는 서버에 연결 요청
            console.log('카메라에 연결 중...', cameraData);

            // 시뮬레이션: 3초 후 연결 완료
            setTimeout(() => {
                setIsConnecting(false);
                Alert.alert(
                    '연결 성공',
                    '홈캠에 성공적으로 연결되었습니다!',
                    [
                        {
                            text: '확인',
                            onPress: () => {
                                navigation.replace('ViewerHome');
                            },
                        },
                    ]
                );
            }, 3000);
        } catch (error) {
            setIsConnecting(false);
            Alert.alert('연결 실패', '카메라에 연결할 수 없습니다. 다시 시도해주세요.');
        }
    };

    const handleManualInput = () => {
        Alert.prompt(
            '수동 연결',
            '카메라 ID를 입력하세요:',
            [
                { text: '취소', style: 'cancel' },
                {
                    text: '연결',
                    onPress: (cameraId) => {
                        if (cameraId) {
                            const mockData = {
                                type: 'mimo_camera_connect',
                                deviceId: cameraId,
                                timestamp: Date.now(),
                                version: '1.0.0'
                            };
                            handleConnectToCamera(mockData);
                        }
                    },
                },
            ],
            'plain-text'
        );
    };

    const renderScanner = () => {
        if (isConnecting) {
            return (
                <View style={styles.connectingContainer}>
                    <View style={styles.connectingIcon}>
                        <Ionicons name="wifi" size={80} color={colors.primary} />
                    </View>
                    <Text style={styles.connectingTitle}>카메라에 연결 중...</Text>
                    <Text style={styles.connectingText}>잠시만 기다려주세요</Text>
                </View>
            );
        }

        return (
            <View style={styles.scannerContainer}>
                <View style={styles.scannerFrame}>
                    <LinearGradient
                        colors={['transparent', 'rgba(0,0,0,0.8)']}
                        style={styles.scannerOverlay}
                    >
                        <View style={styles.scannerArea}>
                            <View style={styles.cornerTL} />
                            <View style={styles.cornerTR} />
                            <View style={styles.cornerBL} />
                            <View style={styles.cornerBR} />

                            <View style={styles.scannerLine} />
                        </View>
                    </LinearGradient>
                </View>

                <View style={styles.scannerInfo}>
                    <Ionicons name="qr-code" size={40} color={colors.primary} />
                    <Text style={styles.scannerTitle}>QR 코드 스캔</Text>
                    <Text style={styles.scannerDescription}>
                        홈캠 기기에서 표시된 QR 코드를 이 영역에 맞춰주세요
                    </Text>
                </View>
            </View>
        );
    };

    return (
        <>
            <StatusBar barStyle="light-content" backgroundColor={colors.text} />
            <View style={styles.container}>
                <LinearGradient
                    colors={[colors.text, '#1a1a1a']}
                    style={styles.backgroundGradient}
                />

                <SafeAreaView style={styles.safeArea}>
                    {/* Header */}
                    <View style={styles.header}>
                        <TouchableOpacity onPress={() => navigation.goBack()}>
                            <Ionicons name="arrow-back" size={24} color={colors.surface} />
                        </TouchableOpacity>
                        <Text style={styles.headerTitle}>QR 코드 스캔</Text>
                        <TouchableOpacity onPress={handleManualInput}>
                            <Ionicons name="keyboard" size={24} color={colors.surface} />
                        </TouchableOpacity>
                    </View>

                    {/* Scanner */}
                    <View style={styles.scannerSection}>
                        {renderScanner()}
                    </View>

                    {/* Instructions */}
                    <View style={styles.instructionsSection}>
                        <View style={styles.instructionCard}>
                            <View style={styles.instructionItem}>
                                <View style={styles.instructionIcon}>
                                    <Ionicons name="camera" size={20} color={colors.primary} />
                                </View>
                                <Text style={styles.instructionText}>
                                    홈캠 기기에서 QR 코드를 표시하세요
                                </Text>
                            </View>
                            <View style={styles.instructionItem}>
                                <View style={styles.instructionIcon}>
                                    <Ionicons name="scan" size={20} color={colors.primary} />
                                </View>
                                <Text style={styles.instructionText}>
                                    QR 코드를 스캔 영역에 맞춰주세요
                                </Text>
                            </View>
                            <View style={styles.instructionItem}>
                                <View style={styles.instructionIcon}>
                                    <Ionicons name="wifi" size={20} color={colors.primary} />
                                </View>
                                <Text style={styles.instructionText}>
                                    자동으로 연결이 완료됩니다
                                </Text>
                            </View>
                        </View>
                    </View>

                    {/* Action Buttons */}
                    <View style={styles.actionSection}>
                        <TouchableOpacity
                            style={styles.actionButton}
                            onPress={handleManualInput}
                        >
                            <LinearGradient
                                colors={[colors.surface, colors.surfaceAlt]}
                                style={styles.actionButtonGradient}
                            >
                                <Ionicons name="keyboard-outline" size={20} color={colors.primary} />
                                <Text style={styles.actionButtonText}>수동으로 연결</Text>
                            </LinearGradient>
                        </TouchableOpacity>

                        <TouchableOpacity
                            style={styles.secondaryButton}
                            onPress={() => Alert.alert('도움말', '홈캠 기기에서 QR 코드를 표시한 후 이 화면에서 스캔하세요.')}
                        >
                            <Ionicons name="help-circle-outline" size={20} color={colors.surface} />
                            <Text style={styles.secondaryButtonText}>연결 방법 보기</Text>
                        </TouchableOpacity>
                    </View>
                </SafeAreaView>
            </View>
        </>
    );
}

const styles = StyleSheet.create({
    container: {
        flex: 1,
        backgroundColor: colors.text,
    },
    backgroundGradient: {
        position: 'absolute',
        top: 0,
        left: 0,
        right: 0,
        bottom: 0,
    },
    safeArea: {
        flex: 1,
    },
    header: {
        flexDirection: 'row',
        alignItems: 'center',
        justifyContent: 'space-between',
        paddingHorizontal: spacing.xl,
        paddingVertical: spacing.lg,
    },
    headerTitle: {
        fontSize: 20,
        fontWeight: '700',
        color: colors.surface,
    },
    scannerSection: {
        flex: 1,
        justifyContent: 'center',
        alignItems: 'center',
        paddingHorizontal: spacing.xl,
    },
    connectingContainer: {
        alignItems: 'center',
        justifyContent: 'center',
        paddingVertical: spacing.xl,
    },
    connectingIcon: {
        marginBottom: spacing.lg,
    },
    connectingTitle: {
        fontSize: 24,
        fontWeight: '700',
        color: colors.surface,
        marginBottom: spacing.sm,
    },
    connectingText: {
        fontSize: 16,
        color: colors.surface + 'CC',
    },
    scannerContainer: {
        alignItems: 'center',
        width: '100%',
    },
    scannerFrame: {
        width: screenWidth - spacing.xl * 2,
        height: screenWidth - spacing.xl * 2,
        position: 'relative',
        marginBottom: spacing.xl,
    },
    scannerOverlay: {
        flex: 1,
        justifyContent: 'center',
        alignItems: 'center',
    },
    scannerArea: {
        width: 250,
        height: 250,
        position: 'relative',
    },
    cornerTL: {
        position: 'absolute',
        top: 0,
        left: 0,
        width: 30,
        height: 30,
        borderTopWidth: 4,
        borderLeftWidth: 4,
        borderColor: colors.primary,
    },
    cornerTR: {
        position: 'absolute',
        top: 0,
        right: 0,
        width: 30,
        height: 30,
        borderTopWidth: 4,
        borderRightWidth: 4,
        borderColor: colors.primary,
    },
    cornerBL: {
        position: 'absolute',
        bottom: 0,
        left: 0,
        width: 30,
        height: 30,
        borderBottomWidth: 4,
        borderLeftWidth: 4,
        borderColor: colors.primary,
    },
    cornerBR: {
        position: 'absolute',
        bottom: 0,
        right: 0,
        width: 30,
        height: 30,
        borderBottomWidth: 4,
        borderRightWidth: 4,
        borderColor: colors.primary,
    },
    scannerLine: {
        position: 'absolute',
        top: 0,
        left: 0,
        right: 0,
        height: 2,
        backgroundColor: colors.primary,
        opacity: 0.8,
    },
    scannerInfo: {
        alignItems: 'center',
        paddingHorizontal: spacing.xl,
    },
    scannerTitle: {
        fontSize: 20,
        fontWeight: '700',
        color: colors.surface,
        marginTop: spacing.lg,
        marginBottom: spacing.sm,
    },
    scannerDescription: {
        fontSize: 16,
        color: colors.surface + 'CC',
        textAlign: 'center',
        lineHeight: 24,
    },
    instructionsSection: {
        paddingHorizontal: spacing.xl,
        paddingVertical: spacing.lg,
    },
    instructionCard: {
        backgroundColor: colors.surface,
        borderRadius: radius.lg,
        padding: spacing.lg,
        ...elevation['2'],
    },
    instructionItem: {
        flexDirection: 'row',
        alignItems: 'center',
        marginBottom: spacing.md,
    },
    instructionIcon: {
        width: 40,
        height: 40,
        borderRadius: 20,
        backgroundColor: colors.primary + '20',
        alignItems: 'center',
        justifyContent: 'center',
        marginRight: spacing.md,
    },
    instructionText: {
        fontSize: 16,
        color: colors.text,
        flex: 1,
        fontWeight: '500',
    },
    actionSection: {
        paddingHorizontal: spacing.xl,
        paddingBottom: spacing.lg,
    },
    actionButton: {
        borderRadius: radius.lg,
        overflow: 'hidden',
        marginBottom: spacing.md,
        ...elevation['2'],
    },
    actionButtonGradient: {
        flexDirection: 'row',
        alignItems: 'center',
        justifyContent: 'center',
        paddingVertical: spacing.md,
        gap: spacing.sm,
    },
    actionButtonText: {
        fontSize: 16,
        fontWeight: '600',
        color: colors.primary,
    },
    secondaryButton: {
        flexDirection: 'row',
        alignItems: 'center',
        justifyContent: 'center',
        paddingVertical: spacing.md,
        gap: spacing.sm,
    },
    secondaryButtonText: {
        fontSize: 16,
        fontWeight: '600',
        color: colors.surface,
    },
}); 
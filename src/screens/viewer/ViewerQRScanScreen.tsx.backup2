import React, { useState, useEffect } from "react";
import {
    View,
    Text,
    StyleSheet,
    TouchableOpacity,
    StatusBar,
    Alert,
    Dimensions,
} from "react-native";
import { LinearGradient } from "expo-linear-gradient";
import { Ionicons } from "@expo/vector-icons";
import { SafeAreaView } from "react-native-safe-area-context";
import { BarCodeScanner } from "expo-barcode-scanner";
import { colors, spacing, radius, elevation } from "../../design/tokens";
import { NativeStackNavigationProp } from "@react-navigation/native-stack";
import { RootStackParamList } from "../../navigation/AppNavigator";

const { width: screenWidth, height: screenHeight } = Dimensions.get("window");

type ViewerQRScanScreenNavigationProp = NativeStackNavigationProp<RootStackParamList, "ViewerQRScan">;

interface ViewerQRScanScreenProps {
    navigation: ViewerQRScanScreenNavigationProp;
}

export default function ViewerQRScanScreen({ navigation }: ViewerQRScanScreenProps) {
    const [hasPermission, setHasPermission] = useState<boolean | null>(null);
    const [scanned, setScanned] = useState(false);
    const [isConnecting, setIsConnecting] = useState(false);

    useEffect(() => {
        const getBarCodeScannerPermissions = async () => {
            const { status } = await BarCodeScanner.requestPermissionsAsync();
            setHasPermission(status === "granted");
        };

        getBarCodeScannerPermissions();
    }, []);

    const handleBarCodeScanned = ({ type, data }: { type: string; data: string }) => {
        if (scanned) return;
        
        setScanned(true);
        handleQRCodeScanned(data);
    };

    const handleQRCodeScanned = (data: string) => {
        try {
            const parsedData = JSON.parse(data);

            if (parsedData.type === "mimo_camera_connect") {
                handleConnectToCamera(parsedData);
            } else {
                Alert.alert("잘못된 QR 코드", "MIMO 홈캠 QR 코드가 아닙니다.");
                setScanned(false);
            }
        } catch (error) {
            Alert.alert("오류", "QR 코드를 읽을 수 없습니다.");
            setScanned(false);
        }
    };

    const handleConnectToCamera = async (cameraData: any) => {
        setIsConnecting(true);

        try {
            // 실제로는 서버에 연결 요청
            console.log("카메라에 연결 중...", cameraData);

            // 시뮬레이션: 3초 후 연결 완료
            setTimeout(() => {
                setIsConnecting(false);
                Alert.alert(
                    "연결 성공",
                    "홈캠에 성공적으로 연결되었습니다!",
                    [
                        {
                            text: "확인",
                            onPress: () => {
                                navigation.replace("ViewerHome");
                            },
                        },
                    ]
                );
            }, 3000);
        } catch (error) {
            setIsConnecting(false);
            Alert.alert("연결 실패", "카메라에 연결할 수 없습니다. 다시 시도해주세요.");
            setScanned(false);
        }
    };

    const handleManualInput = () => {
        Alert.prompt(
            "수동 연결",
            "카메라 ID를 입력하세요:",
            [
                { text: "취소", style: "cancel" },
                {
                    text: "연결",
                    onPress: (cameraId) => {
                        if (cameraId) {
                            const mockData = {
                                type: "mimo_camera_connect",
                                deviceId: cameraId,
                                timestamp: Date.now(),
                                version: "1.0.0",
                            };
                            handleConnectToCamera(mockData);
                        }
                    },
                },
            ]
        );
    };

    const handleHelp = () => {
        Alert.alert(
            "연결 방법",
            "1. 홈캠 기기에서 QR 코드를 생성하세요\n2. QR 코드를 스캔 영역에 맞춰주세요\n3. 자동으로 연결이 완료됩니다"
        );
    };

    if (hasPermission === null) {
        return (
            <View style={styles.container}>
                <Text>카메라 권한을 요청 중...</Text>
            </View>
        );
    }

    if (hasPermission === false) {
        return (
            <View style={styles.container}>
                <Text>카메라 접근 권한이 필요합니다.</Text>
            </View>
        );
    }

    return (
        <>
            <StatusBar barStyle="light-content" backgroundColor={colors.background} />
            <View style={styles.container}>
                <LinearGradient
                    colors={[colors.background, colors.surfaceAlt]}
                    style={styles.backgroundGradient}
                    start={{ x: 0, y: 0 }}
                    end={{ x: 1, y: 1 }}
                />

                <SafeAreaView style={styles.safeArea}>
                    {/* Header */}
                    <View style={styles.header}>
                        <TouchableOpacity
                            style={styles.backButton}
                            onPress={() => navigation.goBack()}
                        >
                            <Ionicons name="arrow-back" size={24} color={colors.surface} />
                        </TouchableOpacity>
                        <Text style={styles.headerTitle}>QR 코드 스캔</Text>
                        <TouchableOpacity style={styles.helpButton} onPress={handleHelp}>
                            <Ionicons name="help-circle" size={24} color={colors.surface} />
                        </TouchableOpacity>
                    </View>

                    {/* QR Scanner */}
                    <View style={styles.scannerContainer}>
                        <BarCodeScanner
                            onBarCodeScanned={scanned ? undefined : handleBarCodeScanned}
                            style={styles.scanner}
                        />
                        
                        {/* Scanner Overlay */}
                        <View style={styles.scannerOverlay}>
                            {/* Corner Guides */}
                            <View style={styles.cornerGuide}>
                                <View style={styles.cornerTopLeft} />
                                <View style={styles.cornerTopRight} />
                                <View style={styles.cornerBottomLeft} />
                                <View style={styles.cornerBottomRight} />
                            </View>

                            {/* QR Icon */}
                            <View style={styles.qrIconContainer}>
                                <Ionicons name="qr-code" size={60} color={colors.surface} />
                            </View>

                            {/* Connecting Indicator */}
                            {isConnecting && (
                                <View style={styles.connectingOverlay}>
                                    <View style={styles.connectingSpinner}>
                                        <Ionicons name="sync" size={40} color={colors.surface} />
                                    </View>
                                    <Text style={styles.connectingText}>연결 중...</Text>
                                </View>
                            )}
                        </View>
                    </View>

                    {/* Instructions */}
                    <View style={styles.instructionsCard}>
                        <View style={styles.instructionItem}>
                            <Ionicons name="camera" size={20} color={colors.primary} />
                            <Text style={styles.instructionText}>
                                홈캠 기기에서 QR 코드를 표시하세요
                            </Text>
                        </View>
                        <View style={styles.instructionItem}>
                            <Ionicons name="scan" size={20} color={colors.primary} />
                            <Text style={styles.instructionText}>
                                QR 코드를 스캔 영역에 맞춰주세요
                            </Text>
                        </View>
                        <View style={styles.instructionItem}>
                            <Ionicons name="wifi" size={20} color={colors.primary} />
                            <Text style={styles.instructionText}>
                                자동으로 연결이 완료됩니다
                            </Text>
                        </View>
                    </View>

                    {/* Manual Connect Button */}
                    <TouchableOpacity style={styles.manualButton} onPress={handleManualInput}>
                        <Ionicons name="help-circle" size={20} color={colors.text} />
                        <Text style={styles.manualButtonText}>수동으로 연결</Text>
                    </TouchableOpacity>

                    {/* Help Link */}
                    <TouchableOpacity style={styles.helpLink} onPress={handleHelp}>
                        <Ionicons name="help-circle" size={16} color={colors.textSecondary} />
                        <Text style={styles.helpLinkText}>연결 방법 보기</Text>
                    </TouchableOpacity>
                </SafeAreaView>
            </View>
        </>
    );
}
const styles = StyleSheet.create({
    container: {
        flex: 1,
    },
    backgroundGradient: {
        position: "absolute",
        top: 0,
        left: 0,
        right: 0,
        bottom: 0,
    },
    safeArea: {
        flex: 1,
    },
    header: {
        flexDirection: "row",
        alignItems: "center",
        justifyContent: "space-between",
        paddingHorizontal: spacing.lg,
        paddingVertical: spacing.md,
        backgroundColor: colors.surface,
    },
    backButton: {
        width: 44,
        height: 44,
        borderRadius: 22,
        backgroundColor: "rgba(0, 0, 0, 0.1)",
        justifyContent: "center",
        alignItems: "center",
    },
    headerTitle: {
        fontSize: 18,
        fontWeight: "600",
        color: colors.text,
    },
    helpButton: {
        width: 44,
        height: 44,
        borderRadius: 22,
        backgroundColor: "rgba(0, 0, 0, 0.1)",
        justifyContent: "center",
        alignItems: "center",
    },
    scannerContainer: {
        flex: 1,
        margin: spacing.lg,
        borderRadius: radius.lg,
        overflow: "hidden",
        position: "relative",
    },
    scanner: {
        flex: 1,
    },
    scannerOverlay: {
        position: "absolute",
        top: 0,
        left: 0,
        right: 0,
        bottom: 0,
        justifyContent: "center",
        alignItems: "center",
    },
    cornerGuide: {
        position: "absolute",
        top: 0,
        left: 0,
        right: 0,
        bottom: 0,
    },
    cornerTopLeft: {
        position: "absolute",
        top: 20,
        left: 20,
        width: 40,
        height: 40,
        borderTopWidth: 4,
        borderLeftWidth: 4,
        borderColor: colors.surface,
    },
    cornerTopRight: {
        position: "absolute",
        top: 20,
        right: 20,
        width: 40,
        height: 40,
        borderTopWidth: 4,
        borderRightWidth: 4,
        borderColor: colors.surface,
    },
    cornerBottomLeft: {
        position: "absolute",
        bottom: 20,
        left: 20,
        width: 40,
        height: 40,
        borderBottomWidth: 4,
        borderLeftWidth: 4,
        borderColor: colors.surface,
    },
    cornerBottomRight: {
        position: "absolute",
        bottom: 20,
        right: 20,
        width: 40,
        height: 40,
        borderBottomWidth: 4,
        borderRightWidth: 4,
        borderColor: colors.surface,
    },
    qrIconContainer: {
        position: "absolute",
        bottom: 40,
        justifyContent: "center",
        alignItems: "center",
    },
    connectingOverlay: {
        position: "absolute",
        top: 0,
        left: 0,
        right: 0,
        bottom: 0,
        backgroundColor: "rgba(0, 0, 0, 0.8)",
        justifyContent: "center",
        alignItems: "center",
    },
    connectingSpinner: {
        marginBottom: spacing.md,
    },
    connectingText: {
        color: colors.surface,
        fontSize: 16,
        fontWeight: "600",
    },
    instructionsCard: {
        marginHorizontal: spacing.lg,
        marginBottom: spacing.md,
        backgroundColor: colors.surface,
        borderRadius: radius.lg,
        padding: spacing.lg,
        elevation: elevation.sm,
        shadowColor: colors.text,
        shadowOffset: { width: 0, height: 1 },
        shadowOpacity: 0.1,
        shadowRadius: 4,
    },
    instructionItem: {
        flexDirection: "row",
        alignItems: "center",
        marginBottom: spacing.sm,
    },
    instructionText: {
        marginLeft: spacing.sm,
        fontSize: 14,
        color: colors.text,
        flex: 1,
    },
    manualButton: {
        marginHorizontal: spacing.lg,
        marginBottom: spacing.md,
        backgroundColor: colors.surface,
        borderRadius: radius.lg,
        padding: spacing.md,
        flexDirection: "row",
        alignItems: "center",
        justifyContent: "center",
        elevation: elevation.sm,
    },
    manualButtonText: {
        marginLeft: spacing.sm,
        fontSize: 16,
        fontWeight: "600",
        color: colors.text,
    },
    helpLink: {
        flexDirection: "row",
        alignItems: "center",
        justifyContent: "center",
        paddingVertical: spacing.sm,
    },
    helpLinkText: {
        marginLeft: spacing.xs,
        fontSize: 14,
        color: colors.textSecondary,
    },
});

import React, { useState, useEffect } from 'react';
import {
    View,
    Text,
    StyleSheet,
    TouchableOpacity,
    StatusBar,
    Alert,
} from 'react-native';
import { LinearGradient } from 'expo-linear-gradient';
import { Ionicons } from '@expo/vector-icons';
import { SafeAreaView } from 'react-native-safe-area-context';
import { colors, spacing, radius, elevation } from '../../design/tokens';
import { NativeStackNavigationProp } from '@react-navigation/native-stack';
import { RootStackParamList } from '../../navigation/AppNavigator';

type CameraHomeScreenNavigationProp = NativeStackNavigationProp<RootStackParamList, 'CameraSettings'>;

interface CameraHomeScreenProps {
    navigation: CameraHomeScreenNavigationProp;
}

export default function CameraHomeScreen({ navigation }: CameraHomeScreenProps) {
    const [isRecording, setIsRecording] = useState(false);
    const [isStreaming, setIsStreaming] = useState(false);
    const [recordingTime, setRecordingTime] = useState(0);
    const [streamingTime, setStreamingTime] = useState(0);

    useEffect(() => {
        let recordingInterval: NodeJS.Timeout;
        let streamingInterval: NodeJS.Timeout;

        if (isRecording) {
            recordingInterval = setInterval(() => {
                setRecordingTime(prev => prev + 1);
            }, 1000);
        }

        if (isStreaming) {
            streamingInterval = setInterval(() => {
                setStreamingTime(prev => prev + 1);
            }, 1000);
        }

        return () => {
            if (recordingInterval) clearInterval(recordingInterval);
            if (streamingInterval) clearInterval(streamingInterval);
        };
    }, [isRecording, isStreaming]);

    const formatTime = (seconds: number) => {
        const hours = Math.floor(seconds / 3600);
        const minutes = Math.floor((seconds % 3600) / 60);
        const secs = seconds % 60;
        return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
    };

    const handleToggleRecording = () => {
        if (isRecording) {
            Alert.alert(
                '녹화 중지',
                '녹화를 중지하시겠어요?',
                [
                    { text: '취소', style: 'cancel' },
                    {
                        text: '중지',
                        style: 'destructive',
                        onPress: () => {
                            setIsRecording(false);
                            setRecordingTime(0);
                        },
                    },
                ]
            );
        } else {
            setIsRecording(true);
            setRecordingTime(0);
        }
    };

    const handleToggleStreaming = () => {
        if (isStreaming) {
            Alert.alert(
                '스트리밍 중지',
                '스트리밍을 중지하시겠어요?',
                [
                    { text: '취소', style: 'cancel' },
                    {
                        text: '중지',
                        style: 'destructive',
                        onPress: () => {
                            setIsStreaming(false);
                            setStreamingTime(0);
                        },
                    },
                ]
            );
        } else {
            setIsStreaming(true);
            setStreamingTime(0);
        }
    };

    const handleSettings = () => {
        navigation.navigate('CameraSettings');
    };

    const handleShowQRCode = () => {
        navigation.navigate('CameraQRCode');
    };

    return (
        <>
            <StatusBar barStyle="light-content" backgroundColor={colors.background} />
            <View style={styles.container}>
                <LinearGradient
                    colors={[colors.background, colors.surfaceAlt]}
                    style={styles.backgroundGradient}
                    start={{ x: 0, y: 0 }}
                    end={{ x: 1, y: 1 }}
                />

                <SafeAreaView style={styles.safeArea}>
                    {/* Header */}
                    <View style={styles.header}>
                        <Text style={styles.title}>홈캠 모드</Text>
                        <Text style={styles.subtitle}>이 기기를 카메라로 사용하세요</Text>
                    </View>

                    {/* Camera Preview */}
                    <View style={styles.cameraPreview}>
                        <LinearGradient
                            colors={[colors.text + '90', colors.text]}
                            style={styles.previewContainer}
                        >
                            <View style={styles.previewContent}>
                                <Ionicons name="camera" size={80} color={colors.surface} />
                                <Text style={styles.previewText}>카메라 미리보기</Text>
                            </View>

                            {/* Recording Indicator */}
                            {isRecording && (
                                <View style={styles.recordingIndicator}>
                                    <View style={styles.recordingDot} />
                                    <Text style={styles.recordingText}>REC {formatTime(recordingTime)}</Text>
                                </View>
                            )}

                            {/* Streaming Indicator */}
                            {isStreaming && (
                                <View style={styles.streamingIndicator}>
                                    <View style={styles.streamingDot} />
                                    <Text style={styles.streamingText}>LIVE {formatTime(streamingTime)}</Text>
                                </View>
                            )}
                        </LinearGradient>
                    </View>

                    {/* Control Buttons */}
                    <View style={styles.controls}>
                        <View style={styles.controlRow}>
                            <TouchableOpacity
                                style={[
                                    styles.controlButton,
                                    styles.recordButton,
                                    isRecording && styles.recordButtonActive
                                ]}
                                onPress={handleToggleRecording}
                            >
                                <LinearGradient
                                    colors={isRecording ? [colors.error, colors.error + 'CC'] : [colors.primary, colors.accent]}
                                    style={styles.controlButtonGradient}
                                >
                                    <Ionicons
                                        name={isRecording ? 'stop' : 'radio-button-on'}
                                        size={32}
                                        color={colors.surface}
                                    />
                                </LinearGradient>
                                <Text style={styles.controlButtonText}>
                                    {isRecording ? '녹화 중지' : '녹화 시작'}
                                </Text>
                            </TouchableOpacity>

                            <TouchableOpacity
                                style={[
                                    styles.controlButton,
                                    styles.streamButton,
                                    isStreaming && styles.streamButtonActive
                                ]}
                                onPress={handleToggleStreaming}
                            >
                                <LinearGradient
                                    colors={isStreaming ? [colors.warning, colors.warning + 'CC'] : [colors.accent, colors.primary]}
                                    style={styles.controlButtonGradient}
                                >
                                    <Ionicons
                                        name={isStreaming ? 'stop-circle' : 'play-circle'}
                                        size={32}
                                        color={colors.surface}
                                    />
                                </LinearGradient>
                                <Text style={styles.controlButtonText}>
                                    {isStreaming ? '스트리밍 중지' : '스트리밍 시작'}
                                </Text>
                            </TouchableOpacity>
                        </View>

                        <TouchableOpacity
                            style={styles.settingsButton}
                            onPress={handleShowQRCode}
                        >
                            <LinearGradient
                                colors={[colors.accent, colors.primary]}
                                style={styles.settingsButtonGradient}
                            >
                                <Ionicons name="qr-code" size={24} color={colors.surface} />
                                <Text style={styles.settingsButtonText}>QR 코드 공유</Text>
                            </LinearGradient>
                        </TouchableOpacity>

                        <TouchableOpacity
                            style={styles.settingsButton}
                            onPress={handleSettings}
                        >
                            <LinearGradient
                                colors={[colors.surface, colors.surfaceAlt]}
                                style={styles.settingsButtonGradient}
                            >
                                <Ionicons name="settings" size={24} color={colors.primary} />
                                <Text style={styles.settingsButtonText}>카메라 설정</Text>
                            </LinearGradient>
                        </TouchableOpacity>
                    </View>

                    {/* Status Info */}
                    <View style={styles.statusInfo}>
                        <View style={styles.statusCard}>
                            <View style={styles.statusHeader}>
                                <Ionicons name="information-circle" size={20} color={colors.primary} />
                                <Text style={styles.statusTitle}>상태 정보</Text>
                            </View>
                            <View style={styles.statusContent}>
                                <View style={styles.statusItem}>
                                    <Text style={styles.statusLabel}>녹화 상태:</Text>
                                    <Text style={[styles.statusValue, { color: isRecording ? colors.error : colors.textSecondary }]}>
                                        {isRecording ? '녹화 중' : '대기 중'}
                                    </Text>
                                </View>
                                <View style={styles.statusItem}>
                                    <Text style={styles.statusLabel}>스트리밍 상태:</Text>
                                    <Text style={[styles.statusValue, { color: isStreaming ? colors.warning : colors.textSecondary }]}>
                                        {isStreaming ? '스트리밍 중' : '대기 중'}
                                    </Text>
                                </View>
                                <View style={styles.statusItem}>
                                    <Text style={styles.statusLabel}>저장 공간:</Text>
                                    <Text style={styles.statusValue}>2.3GB / 32GB</Text>
                                </View>
                            </View>
                        </View>
                    </View>
                </SafeAreaView>
            </View>
        </>
    );
}

const styles = StyleSheet.create({
    container: {
        flex: 1,
        backgroundColor: colors.background,
    },
    backgroundGradient: {
        position: 'absolute',
        top: 0,
        left: 0,
        right: 0,
        bottom: 0,
    },
    safeArea: {
        flex: 1,
    },
    header: {
        paddingHorizontal: spacing.xl,
        paddingTop: spacing.lg,
        paddingBottom: spacing.md,
    },
    title: {
        fontSize: 28,
        fontWeight: '800',
        color: colors.primary,
        marginBottom: spacing.xs,
    },
    subtitle: {
        fontSize: 16,
        color: colors.textSecondary,
        fontWeight: '500',
    },
    cameraPreview: {
        flex: 1,
        paddingHorizontal: spacing.xl,
        paddingVertical: spacing.lg,
    },
    previewContainer: {
        flex: 1,
        borderRadius: radius.xl,
        overflow: 'hidden',
        position: 'relative',
        ...elevation['3'],
    },
    previewContent: {
        flex: 1,
        justifyContent: 'center',
        alignItems: 'center',
    },
    previewText: {
        fontSize: 18,
        color: colors.surface,
        marginTop: spacing.lg,
        fontWeight: '600',
    },
    recordingIndicator: {
        position: 'absolute',
        top: spacing.lg,
        right: spacing.lg,
        flexDirection: 'row',
        alignItems: 'center',
        backgroundColor: colors.error,
        paddingHorizontal: spacing.md,
        paddingVertical: spacing.sm,
        borderRadius: radius.full,
        gap: spacing.xs,
    },
    recordingDot: {
        width: 8,
        height: 8,
        borderRadius: 4,
        backgroundColor: colors.surface,
    },
    recordingText: {
        fontSize: 12,
        color: colors.surface,
        fontWeight: '700',
    },
    streamingIndicator: {
        position: 'absolute',
        top: spacing.lg,
        left: spacing.lg,
        flexDirection: 'row',
        alignItems: 'center',
        backgroundColor: colors.warning,
        paddingHorizontal: spacing.md,
        paddingVertical: spacing.sm,
        borderRadius: radius.full,
        gap: spacing.xs,
    },
    streamingDot: {
        width: 8,
        height: 8,
        borderRadius: 4,
        backgroundColor: colors.surface,
    },
    streamingText: {
        fontSize: 12,
        color: colors.surface,
        fontWeight: '700',
    },
    controls: {
        paddingHorizontal: spacing.xl,
        paddingBottom: spacing.lg,
    },
    controlRow: {
        flexDirection: 'row',
        gap: spacing.md,
        marginBottom: spacing.lg,
    },
    controlButton: {
        flex: 1,
        borderRadius: radius.lg,
        overflow: 'hidden',
        ...elevation['2'],
    },
    controlButtonGradient: {
        paddingVertical: spacing.xl,
        alignItems: 'center',
        justifyContent: 'center',
    },
    controlButtonText: {
        fontSize: 14,
        fontWeight: '600',
        color: colors.surface,
        marginTop: spacing.sm,
        textAlign: 'center',
    },
    recordButton: {
        // 기본 스타일
    },
    recordButtonActive: {
        ...elevation['4'],
    },
    streamButton: {
        // 기본 스타일
    },
    streamButtonActive: {
        ...elevation['4'],
    },
    settingsButton: {
        borderRadius: radius.lg,
        overflow: 'hidden',
        ...elevation['1'],
    },
    settingsButtonGradient: {
        flexDirection: 'row',
        alignItems: 'center',
        justifyContent: 'center',
        paddingVertical: spacing.md,
        gap: spacing.sm,
    },
    settingsButtonText: {
        fontSize: 16,
        fontWeight: '600',
        color: colors.primary,
    },
    statusInfo: {
        paddingHorizontal: spacing.xl,
        paddingBottom: spacing.lg,
    },
    statusCard: {
        backgroundColor: colors.surface,
        borderRadius: radius.lg,
        padding: spacing.lg,
        ...elevation['1'],
    },
    statusHeader: {
        flexDirection: 'row',
        alignItems: 'center',
        marginBottom: spacing.md,
        gap: spacing.sm,
    },
    statusTitle: {
        fontSize: 16,
        fontWeight: '700',
        color: colors.text,
    },
    statusContent: {
        gap: spacing.sm,
    },
    statusItem: {
        flexDirection: 'row',
        justifyContent: 'space-between',
        alignItems: 'center',
    },
    statusLabel: {
        fontSize: 14,
        color: colors.textSecondary,
        fontWeight: '500',
    },
    statusValue: {
        fontSize: 14,
        fontWeight: '600',
        color: colors.text,
    },
}); 